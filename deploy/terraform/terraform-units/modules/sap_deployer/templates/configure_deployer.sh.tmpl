#!/bin/bash
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#
# configure_deployer.sh
#
# This script is intended to perform all the necessary initial
# setup of a node so that it can act as a deployer for use with
# Azure SAP Automated Deployment.
#
# As part of doing so it will:
#
#   * Installs the specified version of terraform so that it
#     is available for all users.
#
#   * Installs the Azure CLI using the provided installer
#     script, making it available for all users.
#
#   * Create a Python virtualenv, which can be used by all
#     users, with the specified Ansible version and related
#     tools, and associated
#   * Create a /etc/profile.d file that will setup a users
#     interactive session appropriately to use these tools.
#
# This script does not modify the system's Python environment,
# instead using a Python virtualenv to host the installed Python
# packages, meaning that standard system updates can be safely
# installed.
#
# The script can be run again to re-install/update the required
# tools if needed. Note that doing so will re-generate the
# /etc/profile.d file, so any local changes will be lost.
#

#
# Setup some useful shell options
#

# Print expanded commands as they are about to be executed
set -o xtrace

# Print shell input lines as they are read in
set -o verbose

# Fail if any command exits with a non-zero exit status
set -o errexit

# Ensure that the exit status of a pipeline command is non-zero if any
# stage of the pipefile has a non-zero exit status.
set -o pipefail

# Fail if attempting to access and unset variable or parameter
set -o nounset

#
# Terraform templated settings
#
rg_name="${rg_name}"
tf_version="${tf_version}"
ARM_CLIENT_ID="${client_id}"
ARM_SUBSCRIPTION_ID="${subscription_id}"
ARM_TENANT_ID="${tenant_id}"
local_user="${local_user}"
use_webapp="${use_webapp}"
ansible_version="${ansible_core_version}"

platform="${platform}"
app_token="${app_token}"
repository="${repository}"
server_url="${server_url}"
api_url="${api_url}"
PAT="${pat}"
DEVURL="${ado_repo}"
POOL="${pool}"
AGENTNAME=$(hostname)

# Validate required parameters for selected platform
if [ "$${platform}" == "github" ]; then
  REQUIRED_VARS=(
    "api_url"
    "repository"
    "app_token"
    "server_url"
  )

  missing_vars=false

  for var in "$${REQUIRED_VARS[@]}"; do
    if [[ -z "$${!var}" ]]; then
      echo "Missing required variable for GitHub: $var"
      missing_vars="true"
    fi
  done

  if [[ "$${missing_vars}" == "true" ]]; then
    echo "Missing required GitHub variables. Cannot setup GitHub runner."
    platform="none"
    exit 10
  fi
fi

#
# Ansible Version settings
#
ansible_version="$${ansible_version:-2.16}"
ansible_major="$${ansible_version%%.*}"
ansible_minor=$(echo "$${ansible_version}." | cut -d . -f 2)

#
# Utility Functions
#
distro_name=""
distro_version=""
distro_name_version=""
error() {
  echo 1>&2 "ERROR: $${@}"
}

get_distro_name() {
  typeset -g distro_name

  if [[ -z "$${distro_name:-}" ]]; then
    distro_name="$(
      . /etc/os-release
      echo "$${ID,,}"
    )"
  fi

  echo "$${distro_name}"
}

get_distro_version() {
  typeset -g distro_version

  if [[ -z "$${distro_version:-}" ]]; then
    distro_version="$(
      . /etc/os-release
      echo "$${VERSION_ID,,}"
    )"
  fi

  echo "$${distro_version}"
}

get_distro_name_version() {
  typeset -g distro_name_version

  if [[ -z "$${distro_name_version:-}" ]]; then
    distro_name_version="$(get_distro_name)_$(get_distro_version)"
  fi

  echo "$${distro_name_version}"
}

#
# Package Management Functions
#
pkg_mgr_init() {
  typeset -g pkg_mgr

  case "$(get_distro_name)" in
  ubuntu | debian)
    pkg_mgr="apt-get"
    pkg_type="deb"
    ;;
  sles | opensuse*)
    pkg_mgr="zypper"
    pkg_type="rpm"
    ;;
  rhel | centos | fedora)
    pkg_mgr="yum"
    pkg_type="rpm"
    ;;
  *)
    error "Unsupported distibution: '$${distro_name}'"
    exit 1
    ;;
  esac
}

pkg_mgr_refresh() {
  typeset -g pkg_mgr pkg_mgr_refreshed

  if [[ -z "$${pkg_mgr:-}" ]]; then
    pkg_mgr_init
  fi

  if [[ -n "$${pkg_mgr_refreshed:-}" ]]; then
    return
  fi

  case "$${pkg_mgr}" in
  apt-get)
    sudo "$${pkg_mgr}" update --quiet
    ;;
  zypper)
    set +o errexit
    sudo "$${pkg_mgr}" --gpg-auto-import-keys --quiet refresh
    set -o errexit
    ;;
  yum)
    sudo "$${pkg_mgr}" update --quiet
    ;;
  esac

  pkg_mgr_refreshed=true
}

pkg_mgr_upgrade() {
  typeset -g pkg_mgr pkg_mgr_upgraded

  if [[ -z "$${pkg_mgr:-}" ]]; then
    pkg_mgr_init
  fi

  if [[ -n "$${pkg_mgr_upgraded:-}" ]]; then
    return
  fi

  case "$${pkg_mgr}" in
  apt-get)
    sudo "$${pkg_mgr}" upgrade --quiet -y
    ;;
  zypper)
    set +o errexit
    sudo "$${pkg_mgr}" --gpg-auto-import-keys --non-interactive patch
    set -o errexit
    ;;
  yum)
    sudo "$${pkg_mgr}" upgrade --quiet -y
    ;;
  esac

  pkg_mgr_upgraded=true
}

pkg_mgr_install() {
  typeset -g pkg_mgr

  pkg_mgr_refresh

  case "$${pkg_mgr}" in
  apt-get)
    sudo env DEBIAN_FRONTEND=noninteractive "$${pkg_mgr}" --quiet --yes install "$${@}"
    ;;
  zypper)
    set +o errexit
    sudo "$${pkg_mgr}" patch --auto-agree-with-licenses --with-interactive --no-confirm
    sleep 60
    sudo "$${pkg_mgr}" --gpg-auto-import-keys --quiet --non-interactive install --no-confirm "$${@}"
    set -o errexit
    ;;
  yum)
    sudo "$${pkg_mgr}" --nogpgcheck --quiet install --assumeyes "$${@}"
    ;;
  *)
    echo "Unsupported package manager: $${pkg_mgr}"
    return 1
    ;;
  esac
}

#
# Directories and paths
#

# Ansible installation directories
ansible_base="/opt/ansible"
ansible_bin="$${ansible_base}/bin"
ansible_venv="$${ansible_base}/venv/$${ansible_version:-2.16}"
ansible_venv_bin="$${ansible_venv}/bin"
ansible_collections="$${ansible_base}/collections"
ansible_pip3="$${ansible_venv_bin}/pip3"

# Azure SAP Automated Deployment directories
asad_home="/home/$${local_user}/Azure_SAP_Automated_Deployment"
asad_ws="$${asad_home}/WORKSPACES"
asad_repo="https://github.com/Azure/sap-automation.git"
asad_dir="$${asad_home}/$(basename "$${asad_repo}" .git)"

asad_sample_repo="https://github.com/Azure/sap-automation-samples.git"
asad_dir="$${asad_home}/$(basename $${asad_repo} .git)"
asad_sample_dir="$${asad_home}/samples"

# Terraform installation directories
tf_base="/opt/terraform"
tf_dir="$${tf_base}/terraform_$${tf_version}"
tf_bin="$${tf_base}/bin"
tf_zip="terraform_$${tf_version}_linux_amd64.zip"
tf_cache="$${tf_base}/.terraform.d/plugin-cache"
export AZADHOME="/home/$${local_user}"

#
#Don't re-run the following if the script is already installed
#

if [ -f /etc/profile.d/deploy_server.sh ]; then
  echo
  echo ##vso[task.logissue type=warning]Deployer already configured
  sudo chmod 775 /etc/profile.d/deploy_server.sh
fi
#
# Main body of script
#

# Check for supported distro
case "$(get_distro_name_version)" in
sles_12*)
  error "Unsupported distro: $${distro_name_version} doesn't provide virtualenv in standard repos."
  exit 1
  ;;
ubuntu* | sles*)
  echo "$${distro_name_version} is supported."
  ;;
rhel*)
  echo "$${distro_name_version} is supported."
  ;;
*)
  error "Unsupported distro: $${distro_name_version} not currently supported."
  exit 1
  ;;
esac

if [ "$(get_distro_version)" == "15.4" ]; then
  error "Unsupported distro: $${distro_name_version} at this time."
  exit 1
fi
if [ "$(get_distro_version)" == "15.5" ]; then
  error "Unsupported distro: $${distro_name_version} at this time."
  exit 1
fi

echo "Set ansible version for specific distros"
echo ""

case "$(get_distro_name)" in
ubuntu)
  echo "we are inside ubuntu  block"
  rel=$(lsb_release -a | grep Release | cut -d':' -f2 | xargs)
  if [ "$rel" == "22.04" ]; then
    ansible_version="$${ansible_version:-2.16}"
    ansible_major="$${ansible_version%%.*}"
    ansible_minor=$(echo "$${ansible_version}." | cut -d . -f 2)
  fi
  ;;
sles)
  echo "we are inside SLES block"
  ansible_version="2.11"
  ansible_major="$${ansible_version%%.*}"
  ansible_minor=$(echo "$${ansible_version}." | cut -d . -f 2)
  # Ansible installation directories
  ansible_base="/opt/ansible"
  ansible_bin="$${ansible_base}/bin"
  ansible_venv="$${ansible_base}/venv/$${ansible_version}"
  ansible_venv_bin="$${ansible_venv}/bin"
  ansible_collections="$${ansible_base}/collections"
  ansible_pip3="$${ansible_venv_bin}/pip3"
  sudo python3 -m pip install virtualenv
  ;;
rhel)
  echo "we are inside RHEL block"
  ansible_version="2.11"
  ansible_major="$${ansible_version%%.*}"
  ansible_minor=$(echo "$${ansible_version}." | cut -d . -f 2)
  # Ansible installation directories
  ansible_base="/opt/ansible"
  ansible_bin="$${ansible_base}/bin"
  ansible_venv="$${ansible_base}/venv/$${ansible_version}"
  ansible_venv_bin="$${ansible_venv}/bin"
  ansible_collections="$${ansible_base}/collections"
  ansible_pip3="$${ansible_venv_bin}/pip3"
  sudo python3 -m pip install virtualenv
  ;;
*)
  echo "we are in the default case statement"
  ;;
esac

echo "Ansible version: $${ansible_version}"
# List of required packages whose names are common to all supported distros
required_pkgs=(
  git
  jq
  unzip
  ca-certificates
  curl
  gnupg
  dos2unix
)

cli_pkgs=(
)

# Include distro version agnostic packages into required packages list
case "$(get_distro_name)" in
ubuntu)
  cli_pkgs+=(
    azure-cli
  )
  required_pkgs+=(
    sshpass
    python3-pip
    python3-virtualenv
    apt-transport-https
    lsb-release
    software-properties-common
    zip
  )
  ;;
sles)
  required_pkgs+=(
    curl
    python3-pip
    lsb-release
  )
  ;;
rhel)
  echo "we are inside RHEL block"
  cli_pkgs+=(
    azure-cli
  )
  required_pkgs+=(
    sshpass
    python36
    python3-pip
  )
  ;;
esac
# Include distro version specific packages into required packages list
case "$(get_distro_name_version)" in
ubuntu_18.04)
  required_pkgs+=(
    virtualenv
  )
  ;;
esac

# Install required packages as determined above
sleep 10
set +o errexit
pkg_mgr_install "$${required_pkgs[@]}"

set -o errexit

# Upgrade packages
pkg_mgr_upgrade

# Ensure our package metadata cache is up to date
pkg_mgr_refresh

# Prepare Azure SAP Automated Deployment folder structure
mkdir -p \
  "$${asad_ws}/LOCAL/${rg_name}" \
  "$${asad_ws}/LIBRARY" \
  "$${asad_ws}/SYSTEM" \
  "$${asad_ws}/LANDSCAPE" \
  "$${asad_ws}/DEPLOYER"

#
# Clone Azure SAP Automated Deployment project repository
#
if [[ ! -d "$${asad_dir}" ]]; then
  git clone "$${asad_repo}" "$${asad_dir}"
fi
#
# Clone Azure SAP Automated Deployment sample repository
#
if [[ ! -d "$${asad_sample_dir}" ]]; then
  git clone "$${asad_sample_repo}" "$${asad_sample_dir}"
fi

chown -R "$${local_user}" "$${asad_home}"

#
# Install terraform for all users
#
sudo mkdir -p \
  "$${tf_dir}" \
  "$${tf_bin}" \
  "$${tf_cache}"

wget -nv -O "/$${asad_home}/$${tf_zip}" "https://releases.hashicorp.com/terraform/$${tf_version}/$${tf_zip}"
sudo unzip -qq -o "/$${asad_home}/$${tf_zip}" -d "$${tf_dir}"
sudo ln -vfs "../$(basename "$${tf_dir}")/terraform" "$${tf_bin}/terraform"
sudo chmod 755 "$${tf_bin}/terraform"

sudo rm "/$${asad_home}/$${tf_zip}"

# Uninstall Azure CLI - For some platforms
case "$(get_distro_name)" in
ubuntu | sles)
  rel=$(lsb_release -a | grep Release | cut -d':' -f2 | xargs)
  # Ubuntu 20.04 (Focal Fossa) and 20.10 (Groovy Gorilla) include an azure-cli package with version 2.0.81 provided by the universe repository.
  # This package is outdated and not recommended. If this package is installed, remove the package
  if [ "$rel" == "20.04" ]; then
    echo "Removing Azure CLI"
    sudo apt remove azure-cli -y
    sudo apt autoremove -y
    sudo apt update -y
  fi
  if [ "$(get_distro_version)" == "15.3" ]; then
    set +o errexit
    sudo zypper rm -y --clean-deps azure-cli
    set -o errexit
  fi
  ;;
esac

# Install Azure CLI
case "$(get_distro_name)" in
ubuntu)
  # echo "Getting the Microsoft Key"
  sudo mkdir -p /etc/apt/keyrings
  curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg >/dev/null
  sudo chmod go+r /etc/apt/keyrings/microsoft.gpg

  AZ_REPO=$(lsb_release -cs)
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
    sudo tee /etc/apt/sources.list.d/azure-cli.list

  sudo apt-get update
  #sudo curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  rel=$(lsb_release -a | grep Release | cut -d':' -f2 | xargs)

  sudo apt-get install azure-cli -y
  ;;
sles)
  set +o errexit
  if [ -f /home/"$${local_user}"/repos_configured ]; then
    sudo zypper install -y --from azure-cli azure-cli
  else
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    repo_found=$(zypper repos | grep "Azure CLI")
    if [ -z "$${repo_found}" ]; then
      sudo zypper addrepo --name 'Azure CLI' --check https://packages.microsoft.com/yumrepos/azure-cli azure-cli
    fi
    sudo touch /home/$${local_user}/repos_configured
    sudo zypper install -y --from azure-cli azure-cli
  fi
  set -o errexit
  ;;
rhel*)
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo dnf install -y https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm
  sudo dnf install -y azure-cli
  ;;
esac

set +o errexit
pkg_mgr_install "$${cli_pkgs[@]}"
set -o errexit

# Install Ansible
case "$(get_distro_name)" in
ubuntu)
  sudo add-apt-repository --yes --update ppa:ansible/ansible
  ;;
esac

# If the deployer will be an ADO agent install the devops cli
# turn tracing off when you are here
set +o xtrace
if [[ -n "$${PAT}" ]]; then
  az extension add -n azure-devops >/dev/null
fi

set -o xtrace

/usr/bin/az extension add --name storage-blob-preview >/dev/null

# Fail if any command exits with a non-zero exit status
set -o errexit

case "$(get_distro_name)" in
rhel)
  if [[ ! -e "$${ansible_venv_bin}/activate" ]]; then
    sudo rm -rf "$${ansible_venv}"
    sudo python3 -m venv "$${ansible_venv}"
    source "$${ansible_venv_bin}/activate"
  fi
  ;;
ubuntu | sles)
  # Create a Python3 based venv into which we will install Ansible.
  if [[ ! -e "$${ansible_venv_bin}/activate" ]]; then
    sudo rm -rf "$${ansible_venv}"
    sudo virtualenv --python python3 "$${ansible_venv}"
  fi
  ;;
esac

# Ensure our package metadata cache is up to date
# pkg_mgr_refresh
# pkg_mgr_upgrade
#
# Install latest Ansible revision of specified version for all users.
#
sudo mkdir -p \
  "$${ansible_bin}"

# Fail if pip3 doesn't exist in the venv
if [[ ! -x "$${ansible_venv_bin}/pip3" ]]; then
  echo "Using the wrong pip3: '$${found_pip3}' != '$${ansible_venv_bin}/pip3'"
  exit 1
fi

# Ensure that standard tools are up to date
sudo "$${ansible_venv_bin}/pip3" install --upgrade \
  pip \
  wheel \
  setuptools

# Install requirements
if [[ -f "$${asad_dir}/deploy/ansible/requirements.txt" ]]; then
  sudo "$${ansible_venv_bin}/pip3" install -r "$${asad_dir}/deploy/ansible/requirements.txt"
fi

# Install latest MicroSoft tication LAuthenibrary
# TODO(rtamalin): Do we need this? In particular do we expect to integrated
# Rust based tools with the Python/Ansible envs that we are using?
# sudo $${ansible_venv_bin}/pip3 install \
#    setuptools-rust

# Install latest revision of target Ansible version, along with additional
# useful/supporting Python packages such as ansible-lint, yamllint,
# argcomplete, pywinrm.
# ansible-lint \
#  yamllint \

sudo "$${ansible_venv_bin}/pip3" install \
  "ansible-core>=$${ansible_major}.$${ansible_minor},<$${ansible_major}.$((ansible_minor + 1))" \
  argcomplete \
  'pywinrm>=0.3.0' \
  netaddr \
  jmespath \
  pywinrm[credssp]

# Create symlinks for all relevant commands that were installed in the Ansible
# venv's bin so that they are available in the /opt/ansible/bin directory, which
# will be added to the system PATH. This ensures that we expose only those tools
# that we need from the Ansible venv bin directory without superceding standard
# system versions of the commands that are also found there, e.g. python3.
ansible_venv_commands=(
  # Ansible 2.9 command set
  ansible
  ansible-config
  ansible-connection
  ansible-console
  ansible-doc
  ansible-galaxy
  ansible-inventory
  ansible-playbook
  ansible-pull
  ansible-test
  ansible-vault

  # ansible-lint
  # ansible-lint

  # argcomplete
  activate-global-python-argcomplete

  # yamllint
  # yamllint
)

relative_path="$(realpath --relative-to $${ansible_bin} $${ansible_venv_bin})"
for vcmd in "$${ansible_venv_commands[@]}"; do
  sudo ln -vfs "$${relative_path}/$${vcmd}" "$${ansible_bin}/$${vcmd}"
done

# Ensure that Python argcomplete is enabled for all users interactive shell sessions
# sudo "$${ansible_bin}/activate-global-python-argcomplete"

# Install Ansible collections under the ANSIBLE_COLLECTIONS_PATH for all users.
sudo mkdir -p "$${ansible_collections}"

set +o xtrace

sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install ansible.windows --force --collections-path "$${ansible_collections}"
sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install ansible.posix --force --collections-path "$${ansible_collections}"
sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install ansible.utils --force --collections-path "$${ansible_collections}"
sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install community.windows --force --collections-path "$${ansible_collections}"
sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install microsoft.ad --force --collections-path "$${ansible_collections}"

if [[ "$${ansible_version}" == "2.11" ]]; then
  # ansible galaxy upstream has changed. Some collections are only available for install via old-galaxy.ansible.com
  # https://github.com/ansible/ansible/issues/81830
  # https://stackoverflow.com/questions/77225047/gitlab-pipeline-to-install-ansible-galaxy-role-fails/77238083#77238083
  echo "Installing some ansible collections from old-galaxy.ansible.com"
  sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install community.general --force --collections-path "$${ansible_collections}" --server="https://old-galaxy.ansible.com" --ignore-certs
  sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install ansible.netcommon --force --collections-path "$${ansible_collections}" --server="https://old-galaxy.ansible.com" --ignore-certs
else
  echo "Installing community.general"
  sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install community.general --force --collections-path "$${ansible_collections}"
  echo "Installing ansible.netcommon:5.1.2"
  sudo -H "$${ansible_venv_bin}/ansible-galaxy" collection install ansible.netcommon:5.1.2 --force --collections-path "$${ansible_collections}"
fi
set -o xtrace

#
# Create /etc/profile.d script to setup environment for interactive sessions
#
echo '# Configure environment settings for deployer interactive sessions' | sudo tee /etc/profile.d/deploy_server.sh

# Set env for ansible
echo export ANSIBLE_HOST_KEY_CHECKING=False | sudo tee -a /etc/profile.d/deploy_server.sh
echo export ANSIBLE_COLLECTIONS_PATH="$${ansible_collections}" | sudo tee -a /etc/profile.d/deploy_server.sh

export DOTNET_INSTALL_DIR='/opt/dotnet'

sudo mkdir -p "$${DOTNET_INSTALL_DIR}"

case "$(get_distro_name)" in
ubuntu)
  echo "export DOTNET_ROOT=/snap/dotnet-sdk/current" | tee -a /tmp/deploy_server.sh
  export DOTNET_ROOT='/snap/dotnet-sdk/current'
  ;;
sles)
  echo "export DOTNET_ROOT=$${DOTNET_INSTALL_DIR}" | tee -a /tmp/deploy_server.sh
  export DOTNET_ROOT="$${DOTNET_INSTALL_DIR}"
  ;;
rhel*)
  echo "export DOTNET_ROOT=$${DOTNET_INSTALL_DIR}" | tee -a /tmp/deploy_server.sh
  export DOTNET_ROOT="$${DOTNET_INSTALL_DIR}"
  ;;
esac

export PATH="$${PATH}":"$${ansible_bin}":"$${tf_bin}":"$${DOTNET_ROOT}"

(echo export AZADHOME="/home/$${local_user}" | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1

# Set env for MSI
(echo export ARM_USE_MSI=true | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1
(echo export ARM_TENANT_ID="$${ARM_TENANT_ID}" | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1
(echo export ARM_CLIENT_ID="$${ARM_CLIENT_ID}" | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1

# if [[ -n $${TOKEN} ]]; then
#     echo export AZURE_DEVOPS_EXT_PAT=$${TOKEN} | sudo tee -a /etc/profile.d/deploy_server.sh
# fi

# Add new /opt bin directories to start of PATH to ensure the versions we installed
# are preferred over any installed standard system versions.
echo export "PATH=$${ansible_bin}:$${tf_bin}:$${PATH}":"$${DOTNET_ROOT}":"$${AZADHOME}/Azure_SAP_Automated_Deployment/sap-automation/deploy/scripts" | sudo tee -a /etc/profile.d/deploy_server.sh

# Ensure that the user's account is logged in to Azure with specified creds
(echo az login --identity --allow-no-subscriptions --client-id "$${ARM_CLIENT_ID}" --output none | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1
(echo echo "$${USER}" account ready for use with Azure SAP Automated Deployment | sudo tee -a /etc/profile.d/deploy_server.sh) >/dev/null 2>&1

sudo runuser -l "$${local_user}" -c '/usr/bin/az login --identity --allow-no-subscriptions --client-id "$$ARM_CLIENT_ID" --output none'

#
# Create Agent
#
export agent_home="/home/$${local_user}/agent"

# GitHub Actions runner setup function
function setup_github_runner() {
  pushd $${agent_home}

  if [[ -f svc.sh ]]; then
    echo "Runner might already be installed"

    set -e
    sudo ./svc.sh status
    exit_code=$?
    set +e

    if [ $exit_code -eq 0 ]; then
      echo "Runner is already running"
      return 0
    fi
  fi

  echo "Installing GitHub Actions runner"
  curl -sSfL $(curl -sSf https://api.github.com/repos/actions/runner/releases/latest | jq '.assets.[].browser_download_url' -r | egrep 'linux-x64-[0-9.]+tar.gz$') | tar zx

  set +e
  runner_token_response=$(curl -sS --fail-with-body \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${app_token}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -L "${api_url}/repos/${repository}/actions/runners/registration-token")
  exit_code=$?
  set -e

  runner_token=$(echo $${runner_token_response} | jq -r .token)
  if [[ 0 != $${exit_code} ]]; then
    echo "Failed to get the GitHub Runner token: $${runner_token_response}"
    return 1
  fi

  sudo chown -R "$${local_user}" $${agent_home}

  # Remove runner if it already exists
  ./config.sh remove --token $${runner_token} || true

  sudo runuser -l "$${local_user}" -c "$${agent_home}/config.sh --unattended --url $${server_url}/$${repository} --token $${runner_token} --name $(hostname) --labels sap-deployer"
  sudo ./svc.sh install $${local_user}
  sudo ./svc.sh start
  sudo ./svc.sh status
  popd
}

# Function to install Docker on Mariner Linux
function install_deps_mariner() {
  echo "Installing Docker dependencies for Mariner Linux"
  tdnf install -y \
    ca-certificates \
    curl \
    dotnet-runtime-8.0 \
    dotnet-runtime-deps-8.0 \
    krb5-libs \
    libicu \
    lttng-ust \
    moby-cli \
    moby-engine \
    openssl-libs \
    zlib

  # Install jq, the Mariner version is ancient
  curl -sSfL $(curl -sSf https://api.github.com/repos/jqlang/jq/releases/latest | grep browser_download_url | egrep 'jq-linux-amd64"' | tr -d " " | tr -d "\"" | sed 's/browser_download_url://g') -o jq
  sudo install -m755 jq /usr/local/bin/jq

  # Add the user to the docker group
  sudo usermod -aG docker $${local_user}

  # Enable and start Docker service
  sudo systemctl enable docker.service
  sudo systemctl start docker.service
}

# Function to install Docker on Ubuntu
function install_deps_ubuntu() {
  echo "Installing Docker dependencies for Ubuntu"
  version=$(cat /etc/os-release | grep 'VERSION_ID=' | cut -d= -f2 | tr -d "\"")
  curl -sSfL https://packages.microsoft.com/config/ubuntu/$${version}/packages-microsoft-prod.deb -o packages-microsoft-prod.deb
  sudo dpkg -i packages-microsoft-prod.deb
  rm packages-microsoft-prod.deb

  sudo apt-get update
  sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    dotnet-runtime-8.0 \
    dotnet-sdk-8.0 \
    gnupg \
    lsb-release \
    moby-compose \
    moby-containerd \
    moby-engine

  # Install jq, the Ubuntu version is ancient
  curl -sSfL $(curl -sSf https://api.github.com/repos/jqlang/jq/releases/latest | grep browser_download_url | egrep 'jq-linux-amd64"' | tr -d " " | tr -d "\"" | sed 's/browser_download_url://g') -o jq
  sudo install -m755 jq /usr/local/bin/jq

  # Add the user to the docker group
  sudo usermod -aG docker $${local_user}

  # Start Docker service
  sudo service docker start
}

echo "------------------"
echo "$${platform}"
echo "------------------"

# Install Docker and dependencies for GitHub runner if platform is github
if [ "$${platform}" == "github" ]; then
  echo "Setting up GitHub runner environment"

  # Install Docker based on the OS distribution (only for Ubuntu and Mariner for GitHub runners)
  case $(cat /etc/os-release | grep "^ID=" | cut -d= -f2 | tr -d "\"" | tr '[:upper:]' '[:lower:]') in
  *mariner*)
    install_deps_mariner
    ;;
  *ubuntu*)
    install_deps_ubuntu
    ;;
  *)
    echo "Docker installation for $(get_distro_name) is not supported for GitHub runners. Continuing with setup."
    ;;
  esac

  # Create and setup GitHub runner
  mkdir -p $${agent_home}
  sudo chown -R "$${local_user}" "$${agent_home}"
  setup_github_runner
fi

if [ -f "/home/$${local_user}/agent/agent_installed" ]; then
  echo "Agent already installed"
else
  if [ "$${platform}" != "github" ]; then
    sudo mkdir -p "$${agent_home}"
    cd "$${agent_home}"

    sudo wget -nv https://aka.ms/AAftpys -O agent.tar.gz
    sudo tar zxvf agent.tar.gz >/dev/null 2>&1

    sudo touch "$${agent_home}/agent_installed"

    sudo chown -R "$${local_user}" "$${agent_home}"
  fi
fi

# turn tracing off when you are here
set +o xtrace

# Continue with the existing Azure DevOps agent setup if not using GitHub
if [ "$${platform}" != "github" ]; then
  if [ -n "$${PAT}" ]; then
    echo "Token specified and using it"
    sudo touch "$${agent_home}/tok"
  else
    echo "Token not specified for usage"
    sudo touch "$${agent_home}/no_tok"
  fi

  if [ -f "$${agent_home}/agent_configured" ]; then
    echo "Agent already configured"
  else
    if [[ -n "$${PAT}" ]]; then
      echo "Configuring Agent"
      sudo chmod -R 744 "$${agent_home}"

      cd "$${agent_home}"
      ./env.sh

      if [ -f "$${agent_home}/config_fixed_params.sh" ]; then
        sudo rm "$${agent_home}/config_fixed_params.sh"
      fi

      (echo "$${agent_home}/config.sh" --unattended --url "$${DEVURL}" --auth pat --token "$${PAT}" --pool "$${POOL}" --agent "$${AGENTNAME}" --replace --acceptTeeEula | sudo tee -a "$${agent_home}/config_fixed_params.sh") >/dev/null 2>&1
      sudo chown "$${local_user}" "$${agent_home}/config_fixed_params.sh"
      sudo chmod +x "$${agent_home}/config_fixed_params.sh"

      echo "Installing Agent"

      sudo runuser -l "$${local_user}" -c "$${agent_home}/config_fixed_params.sh" | sudo tee -a "$${agent_home}/log.txt"

      # automatic start configuration after VM reboot

      sudo "$${agent_home}/svc.sh" install "$${local_user}" | sudo tee -a "$${agent_home}/log.txt"

      # start the daemon
      sudo "$${agent_home}/svc.sh" start | sudo tee -a "$${agent_home}/log.txt"

      sudo rm "$${agent_home}/config_fixed_params.sh"

      sudo touch "$${agent_home}/agent_configured"

      echo export "PATH=$${ansible_bin}:$${tf_bin}:"'$${PATH}'::"$${DOTNET_ROOT}" | sudo tee -a /etc/profile.d/deploy_server.sh
      sudo chmod 775 /etc/profile.d/deploy_server.sh
    else
      echo "NO PAT specified"
      echo export "PATH=$${ansible_bin}:$${tf_bin}:"'$${PATH}'::"$${DOTNET_ROOT}":'$${AZADHOME}/Azure_SAP_Automated_Deployment/sap-automation/deploy/scripts' | sudo tee -a /etc/profile.d/deploy_server.sh
      sudo chmod 775 /etc/profile.d/deploy_server.sh

      echo "export SAP_AUTOMATION_REPO_PATH='$${AZADHOME}/Azure_SAP_Automated_Deployment/sap-automation'" | sudo tee -a /etc/profile.d/deploy_server.sh
      echo "export DEPLOYMENT_REPO_PATH='$${AZADHOME}/Azure_SAP_Automated_Deployment/sap-automation'" | sudo tee -a /etc/profile.d/deploy_server.sh
      echo "export CONFIG_REPO_PATH='$${AZADHOME}/Azure_SAP_Automated_Deployment/WORKSPACES'" | sudo tee -a /etc/profile.d/deploy_server.sh
    fi
  fi
fi

# Install dotNet
case "$(get_distro_name)" in
ubuntu)
  sudo snap install dotnet-sdk --classic
  sudo snap alias dotnet-sdk.dotnet dotnet
  ;;
sles)
  # sudo rpm -Uvh https://packages.microsoft.com/config/sles/15/packages-microsoft-prod.rpm
  # sudo ln --force -s /etc/yum.repos.d/microsoft-prod.repo /etc/zypp/repos.d/microsoft-prod.repo
  # sudo zypper install dotnet-sdk-7.0
  sudo wget https://dot.net/v1/dotnet-install.sh -O "/home/$${local_user}/dotnet-install.sh"
  sudo chmod +x "/home/$${local_user}/dotnet-install.sh"
  sudo /home/$${local_user}/dotnet-install.sh --install-dir "$${DOTNET_ROOT}" --channel 8.0
  ;;
rhel*)
  sudo wget https://dot.net/v1/dotnet-install.sh -O "/home/$${local_user}/dotnet-install.sh"
  sudo chmod +x "/home/$${local_user}/dotnet-install.sh"
  sudo /home/$${local_user}/dotnet-install.sh --install-dir "$${DOTNET_ROOT}" --channel 8.0
  ;;
esac
