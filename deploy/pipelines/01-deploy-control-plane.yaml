---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline deploys the control plane                      |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

parameters:

  - name:                              control_plane_name
    displayName:                       "Control Plane Name, use the following syntax: ENV-LOCA-VNET"
    type:                              string
    default:                           MGMT-WEEU-DEP01

  - name:                              use_deployer
    displayName:                       Run on self hosted agent
    type:                              boolean
    default:                           false

  - name:                              sap_automation_repo_path
    displayName:                       The local path on the agent where the sap_automation repo can be found
    type:                              string

  - name:                              config_repo_path
    displayName:                       The local path on the agent where the config repo can be found
    type:                              string

  - name:                              connection_name
    displayName:                       Service Connection Name
    type:                              string

  - name:                              force_reset
    displayName:                       Force a re-install - may require multiple re-runs
    type:                              boolean

  - name:                              test
    type:                              boolean
    default:                           false

stages:
  - stage:                             Prepare_Deployer
    condition:                         and(not(failed()), not(canceled()))
    variables:
      - template:                      variables/01-deploy-control-plane-variables.yaml
        parameters:
          control_plane_name:          ${{ parameters.control_plane_name }}
          use_deployer:                ${{ parameters.use_deployer }}
          force_reset:                 ${{ parameters.force_reset }}
    displayName:                       Prepare the self hosted agent(s)

    jobs:
      - job:                           Prepare_Deployer
        displayName:                   Prepare the self hosted agent
        workspace:
          clean:                       all
        steps:
          - template:                  templates\download.yaml
          - task:                      PostBuildCleanup@4
          - task:                      TerraformInstaller@1
            displayName:               Install terraform
            inputs:
              terraformVersion:        latest
          # Set Variables.
          - task:                      AzureCLI@2
            continueOnError:           false
            inputs:
              azureSubscription:       ${{parameters.connection_name}}
              scriptType:              bash
              scriptLocation:          'scriptPath'
              scriptPath:              $(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/01-control-plane-prepare.sh
              addSpnToEnvironment:     true
              visibleAzLogin:          false
              failOnStandardError:     false
            displayName: Prepare control plane
            env:
              AZURE_DEVOPS_EXT_PAT:           $(System.AccessToken)
              CONFIG_REPO_PATH:               ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
              CONTROL_PLANE_NAME:             ${{ parameters.control_plane_name }}
              DEPLOYER_TFSTATE_KEY:           "${{ parameters.control_plane_name }}-INFRASTRUCTURE.terraform.tfstate"
              FORCE_RESET:                    ${{ lower(parameters.force_reset) }}
              IS_PIPELINE_DEPLOYMENT:         true
              POOL:                           $(POOL)
              OBJECT_ID:                      $(ARM_OBJECT_ID)
              SAP_AUTOMATION_REPO_PATH:       ${{ parameters.sap_automation_repo_path }}
              SYSTEM_ACCESSTOKEN:             $(System.AccessToken)
              TEST_ONLY:                      ${{ parameters.test }}
              TF_IN_AUTOMATION:               true
              TF_LOG:                         $(TF_LOG)
              TF_VAR_agent_ado_url:           $(System.CollectionUri)
              TF_VAR_agent_pat:               $(System.AccessToken)
              TF_VAR_agent_pool:              $(POOL)
              TF_VAR_ansible_core_version:    $(ansible_core_version)
              TF_VAR_tf_version:              $(tf_version)
              TF_VAR_app_registration_app_id: $(APP_REGISTRATION_APP_ID)
              USE_MSI:                        $(Use_MSI)
  - stage:                             PopulateKeyVault
    dependsOn:
                                       - Prepare_Deployer
    condition:                         eq(dependencies.Prepare_Deployer.result, 'Succeeded')
    pool:                              $(this_agent)
    variables:
      - template:                      variables/01-deploy-control-plane-variables.yaml
        parameters:
          control_plane_name:          ${{ parameters.control_plane_name }}
          use_deployer:                ${{ parameters.use_deployer }}
          force_reset:                 ${{ parameters.force_reset }}
    displayName:                       Save the Deployment Credentials in Azure Keyvault

    jobs:
      - job:                           SaveDeploymentCredentials
        displayName:                   Save the Deployment Credentials
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@4
          - template:                  templates\download.yaml
            parameters:
              getLatestFromBranch: true

          - task:                      Bash@3
            name:                      ParameterValidation
            displayName:               Parameter Validation
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/00-validate-credentials.sh"
              failOnStderr:            false
              workingDirectory:        "$(System.DefaultWorkingDirectory)"
            env:
              AZURE_DEVOPS_EXT_PAT:    $(System.AccessToken)
              SYSTEM_COLLECTIONURI:    $(System.CollectionUri)
              SYSTEM_TEAMPROJECT:      $(System.TeamProject)
              ZONE:                    ${{ upper(parameters.control_plane_name) }}
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              DEPLOYER_KEYVAULT:       $(DEPLOYER_KEYVAULT)
          - task:                      Bash@3
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/00-store-secrets-in-keyvault.sh"
              failOnStderr:            false
              workingDirectory:        "$(System.DefaultWorkingDirectory)"
            name:                      StoreSecrets
            displayName:               Store deployment credentials in Key Vault
            env:
              APPLICATION_CONFIGURATION_NAME: $(APPLICATION_CONFIGURATION_NAME)
              ARM_SUBSCRIPTION_ID:            $(ParameterValidation.ARM_SUBSCRIPTION_ID)
              ARM_USE_MSI:                    true
              AZURE_DEVOPS_EXT_PAT:           $(System.AccessToken)
              CLIENT_ID:                      $(ParameterValidation.ARM_CLIENT_ID)
              CLIENT_SECRET:                  $(ParameterValidation.ARM_CLIENT_SECRET)
              CONFIG_REPO_PATH:               ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
              CONTROL_PLANE_NAME:             ${{ parameters.control_plane_name }}
              DEPLOYER_KEYVAULT:              $(DEPLOYER_KEYVAULT)
              OBJECT_ID:                      $(ParameterValidation.ARM_OBJECT_ID)
              SAP_AUTOMATION_REPO_PATH:       ${{ parameters.sap_automation_repo_path }}
              SYSTEM_ACCESSTOKEN:             $(System.AccessToken)
              TENANT_ID:                      $(ParameterValidation.ARM_TENANT_ID)
              TF_VAR_agent_ado_url:           $(System.CollectionUri)
              TF_VAR_agent_pat:               $(System.AccessToken)
              TF_VAR_agent_pool:              $(POOL)
              TF_VAR_ansible_core_version:    $(ansible_core_version)
              TF_VAR_app_registration_app_id: $(APP_REGISTRATION_APP_ID)
              TF_VAR_tf_version:              $(tf_version)
              USE_MSI:                        $(Use_MSI)
              ZONE:                           ${{ upper(parameters.control_plane_name) }}
  - stage:                             DeployControlplaneStage
    dependsOn:
                                       - Prepare_Deployer
                                       - PopulateKeyVault
    condition:                         and(eq(dependencies.Prepare_Deployer.result, 'Succeeded'), eq(dependencies.PopulateKeyVault.result, 'Succeeded'))
    pool:                              $(this_agent)
    variables:
      - template:                      variables/01-deploy-control-plane-variables.yaml
        parameters:
          control_plane_name:          ${{ parameters.control_plane_name }}
          use_deployer:                ${{ parameters.use_deployer }}
          force_reset:                 ${{ parameters.force_reset }}
    displayName:                       Deploy the control plane
    jobs:
      - job:                           DeployControlplaneJob
        displayName:                   Deploy the control plane
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@4
          - template:                  templates\download.yaml
            parameters:
              getLatestFromBranch: true

          - task:                      Bash@3
            name:                      ParameterValidation
            displayName:               Parameter Validation
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/00-validate-credentials.sh"
              failOnStderr:            false
              workingDirectory:        "$(System.DefaultWorkingDirectory)"
            env:
              AZURE_DEVOPS_EXT_PAT:    $(System.AccessToken)
              SYSTEM_COLLECTIONURI:    $(System.CollectionUri)
              SYSTEM_TEAMPROJECT:      $(System.TeamProject)
              ZONE:                    ${{ upper(parameters.control_plane_name) }}
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
          - task:                      Bash@3
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/01-control-plane-deploy.sh"
              failOnStderr:            false
              workingDirectory:        "$(System.DefaultWorkingDirectory)"
            displayName:               Deploy control plane Part 2
            env:
              APPLICATION_CONFIGURATION_NAME:   $(APPLICATION_CONFIGURATION_NAME)
              APP_REGISTRATION_APP_ID:          $(APP_REGISTRATION_APP_ID)
              ARM_SUBSCRIPTION_ID:              $(ARM_SUBSCRIPTION_ID)
              AZURE_DEVOPS_EXT_PAT:             $(System.AccessToken)
              CONFIG_REPO_PATH:                 ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
              CONTROL_PLANE_NAME:               ${{ parameters.control_plane_name }}
              DEPLOYER_TFSTATE_KEY:             "${{ parameters.control_plane_name }}-INFRASTRUCTURE.terraform.tfstate"
              DEPLOYER_KEYVAULT:                $(DEPLOYER_KEYVAULT)
              FORCE_RESET:                      ${{ lower(parameters.force_reset) }}
              IS_PIPELINE_DEPLOYMENT:           true
              OBJECT_ID:                        $(ParameterValidation.ARM_OBJECT_ID)
              CLIENT_ID:                        $(ParameterValidation.ARM_CLIENT_ID)
              POOL:                             $(POOL)
              SAP_AUTOMATION_REPO_PATH:         ${{ parameters.sap_automation_repo_path }}
              SYSTEM_ACCESSTOKEN:               $(System.AccessToken)
              TENANT_ID:                        $(ParameterValidation.ARM_TENANT_ID)
              TEST_ONLY:                        ${{ parameters.test }}
              TF_IN_AUTOMATION:                 true
              TF_LOG:                           DEBUG
              TF_VAR_agent_ado_url:             $(System.CollectionUri)
              TF_VAR_agent_pat:                 $(System.AccessToken)
              TF_VAR_agent_pool:                $(POOL)
              TF_VAR_ansible_core_version:      $(ansible_core_version)
              TF_VAR_app_registration_app_id:   $(APP_REGISTRATION_APP_ID)
              TF_VAR_subscription_id:           $(ARM_SUBSCRIPTION_ID)
              TF_VAR_tf_version:                $(tf_version)
              TF_VAR_use_spn:                   $(Use_MSI)
              USE_MSI:                          $(Use_MSI)
          - task: Bash@3
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/01-webapp-variables.sh"
              failOnStderr:            false
            displayName:               "Get Web App Variables"
            name:                      GetWebAppVariables
            env:
              APPLICATION_CONFIGURATION_NAME: $(APPLICATION_CONFIGURATION_NAME)
              CONTROL_PLANE_NAME:           ${{ parameters.control_plane_name }}
              CONFIG_REPO_PATH:             ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
  - stage:                             Web_App_Deployment
    pool:                              $(this_agent)
    variables:
      - template:                      variables/01-app-service-variables.yaml
        parameters:
          control_plane_name:          ${{ parameters.control_plane_name }}
          use_deployer:                ${{ parameters.use_deployer }}
    displayName:                       Deploy SAP configuration Web App
    dependsOn:
      - Prepare_Deployer
      - DeployControlplaneStage
    condition: |
      and
      (
        eq(dependencies.DeployControlplaneStage.result, 'Succeeded'),
        eq(dependencies.Prepare_Deployer.result, 'Succeeded')

      )
    jobs:
      - job:                           Deploy_web_app
        condition:                     eq(stageDependencies.DeployControlplaneStage.DeployControlplaneJob.outputs['GetWebAppVariables.HAS_WEBAPP'], 'true')
        displayName:                   Deploy SAP configuration Web App
        variables:
          APPSERVICE_NAME:             $[ stageDependencies.DeployControlplaneStage.DeployControlplaneJob.outputs['GetWebAppVariables.APPSERVICE_NAME']]
        workspace:
          clean:                       all
        steps:
          - template:                  templates\download.yaml
          - task:                      PostBuildCleanup@4
          - task:                      DotNetCoreCLI@2
            displayName:               "Build the Configuration Web Application"
            inputs:
              command:                 "build"
              projects:                "$(System.DefaultWorkingDirectory)/sap-automation/Webapp/SDAF/*.csproj"
          - task:                      DotNetCoreCLI@2
            displayName:               "Publish the Configuration Web Application"
            inputs:
              command:                 publish
              projects:                "**/Webapp/**/*.csproj"
              publishWebProjects:      false
              arguments:               "--output $(Build.ArtifactStagingDirectory)/WebApp"
              zipAfterPublish:         true
              modifyOutputPath:        true

          - task:                      AzureWebApp@1
            displayName:               "Deploy the Configuration Web Application"
            inputs:
              azureSubscription:       ${{parameters.connection_name}}
              appType:                 "webApp"
              appName:                 $(APPSERVICE_NAME)
              package:                 "$(Build.ArtifactStagingDirectory)/WebApp/*.zip"
              deploymentMethod:        "auto"
              appSettings: '-CollectionUri $(System.CollectionUri)
                            -ProjectName "$(System.TeamProject)"
                            -RepositoryId $(Build.Repository.ID)
                            -SourceBranch "$(Build.SourceBranchName)"
                            -WORKLOADZONE_PIPELINE_ID $(WORKLOADZONE_PIPELINE_ID)
                            -SYSTEM_PIPELINE_ID $(SYSTEM_PIPELINE_ID)
                            -SAP_INSTALL_PIPELINE_ID $(SAP_INSTALL_PIPELINE_ID)
                            -SDAF_GENERAL_GROUP_ID $(SDAF_GENERAL_GROUP_ID)
                            -IS_PIPELINE_DEPLOYMENT true
                            -CONTROL_PLANE_NAME $(CONTROL_PLANE_NAME)'
            env:
              ARM_SUBSCRIPTION_ID:       $(ParameterValidation.ARM_SUBSCRIPTION_ID)
              SYSTEM_PIPELINE_ID:        $(SYSTEM_PIPELINE_ID)
              WORKLOADZONE_PIPELINE_ID:  $(WORKLOADZONE_PIPELINE_ID)
              SAP_INSTALL_PIPELINE_ID:   $(SAP_INSTALL_PIPELINE_ID)
              SDAF_GENERAL_GROUP_ID:     $(SDAF_GENERAL_GROUP_ID)
              APPSERVICE_NAME:           $(APPSERVICE_NAME)
              APP_TENANT_ID:             $(ParameterValidation.ARM_TENANT_ID)
              AZURE_CONNECTION_NAME:     ${{variables.connection_name}}
              CONTROLPLANE_NAME:         ${{ parameters.control_plane_name }}

          - task: Bash@3
            inputs:
              targetType:              'filePath'
              filePath:                "$(System.DefaultWorkingDirectory)/sap-automation/deploy/scripts/pipeline_scripts/01-webapp-configuration.sh"
              failOnStderr:            false
            displayName:               "Document the Web App configuration steps"
            name:                      Document
            env:
              APPLICATION_CONFIGURATION_NAME: $(APPLICATION_CONFIGURATION_NAME)
              CONTROL_PLANE_NAME:           ${{ parameters.control_plane_name }}
              APP_REGISTRATION_APP_ID:      $(APP_REGISTRATION_APP_ID)
              APP_REGISTRATION_OBJECT_ID:   $(APP_REGISTRATION_OBJECTID)
